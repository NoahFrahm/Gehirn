


population_size = 200
generations = 200
hidden_layers = 0
input_size = 4
end_fitness = 920

##Increase hidden layers

possible rule of thumb
N -> hidden neurons
1.) N = 2/3 * input
2.) N < 2 * input

1.)
population_size = 200
generations = 200
hidden_layers = 2
input_size = 4
end_fitness = 749

2.)
population_size = 200
generations = 200
hidden_layers = 6
input_size = 4
end_fitness = 


##Increase input
population_size = 50
generations = 200
hidden_layers = 50
input_size = 204
end_fitness = 

population_size = 200
generations = 200
hidden_layers = 2
input_size = 204
end_fitness = 1011



##made sure to use fixed seed for piece generation
population_size = 200
generations = 200
hidden_layers = 2
input_size = 204
end_fitness = 
1023 from around round 80+ no change
gen 116 we jump to 1098
gen 160 we get 1182

##trial 2 more hidden layers
population_size = 100
generations = 200
hidden_layers = 50
input_size = 204
end_fitness = 


## new fitness function trainings

##only current piece and next piece info (piece, orientation)
2-5 seconds per generation
population_size = 200
generations = 200
hidden_layers = 0
input_size = 4
end_fitness = 345
old 227

##includes the grid tile statuses
8-20 seconds per generation
population_size = 200
generations = 200
hidden_layers = 0
input_size = 204
end_fitness = 457.8
old 241

##includes 10 hidden nodes
8-36 seconds per generation
population_size = 100
generations = 200
hidden_layers = 10
input_size = 204
end_fitness = 385


18-50 seconds per generation
population_size = 200
generations = 200
hidden_layers = 10
input_size = 204
end_fitness = 373.5


##including the current piece x and y coor
population_size = 200
generations = 200
hidden_layers = 0
input_size = 206
end_fitness = 481.5

population_size = 200
generations = 200
hidden_layers = 10
input_size = 206
end_fitness = 419.7


##best approaches
population_size = 300
generations = 400
hidden_layers = 0
input_size = 206
end_fitness = 673.9








##combine best approaches






